---
// 프로세스 흐름도 컴포넌트
interface Process {
  id: number;
  title: string;
  description: string;
  requirements: {
    text: string;
    accent?: boolean;
  }[];
  badge?: {
    text: string;
    color: string;
  };
}

interface Props {
  processes: Process[];
  title: string;
  description: string;
}

const { processes, title, description } = Astro.props;
---

<div class="process-flow-container">
  <div class="process-flow-header">
    <div class="process-flow-icon">
      <i class="fas fa-project-diagram"></i>
    </div>
    <div class="process-flow-title">
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  </div>

  <div class="process-flow-steps">
    {
      processes.map((process, index) => (
        <div class="process-step">
          <div class="process-number">
            <span>{process.id}</span>
          </div>
          
          <div class="process-card">
            {process.badge && (
              <div class="process-badge" style={`background-color: ${process.badge.color}`}>
                {process.badge.text}
              </div>
            )}
            
            <div class="process-content">
              <h3 class="process-title">{process.title}</h3>
              <p class="process-description">{process.description}</p>
              
              <div class="process-requirements">
                <div class="requirements-label">필요 전문인력</div>
                <div class="requirements-tags">
                  {process.requirements.map((req) => (
                    <span class={`requirement-tag ${req.accent ? 'accent' : ''}`}>
                      {req.text}
                    </span>
                  ))}
                </div>
              </div>
              
              <div class="process-actions">
                <button class="btn btn-primary">인력 구하기</button>
                <button class="btn btn-outline">일감 찾기</button>
              </div>
            </div>
          </div>
          
          {index < processes.length - 1 && (
            <div class="process-connector">
              <div class="connector-line"></div>
            </div>
          )}
        </div>
      ))
    }
  </div>
</div>

<style>
  .process-flow-container {
    max-width: 1000px;
    margin: 2rem auto;
    font-family: 'Noto Sans KR', sans-serif;
  }
  
  .process-flow-header {
    display: flex;
    align-items: center;
    margin-bottom: 2.5rem;
    gap: 1.5rem;
  }
  
  .process-flow-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--primary);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
    color: var(--white);
  }
  
  .process-flow-title h2 {
    font-size: 1.8rem;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }
  
  .process-flow-title p {
    color: var(--text-secondary);
    font-size: 1rem;
  }
  
  .process-flow-steps {
    position: relative;
  }
  
  .process-step {
    display: flex;
    margin-bottom: 2rem;
    position: relative;
  }
  
  .process-number {
    width: 50px;
    height: 50px;
    min-width: 50px;
    border-radius: 50%;
    background: #E8EEFF;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
    margin-right: 20px;
    z-index: 2;
  }
  
  .process-card {
    flex: 1;
    background: var(--white);
    border-radius: 12px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    position: relative;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  .process-badge {
    position: absolute;
    top: -10px;
    right: 20px;
    background: #6461FC;
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 30px;
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .process-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.7rem;
  }
  
  .process-description {
    font-size: 0.95rem;
    color: #666;
    margin-bottom: 1.2rem;
    line-height: 1.5;
  }
  
  .process-requirements {
    margin-bottom: 1.2rem;
  }
  
  .requirements-label {
    font-size: 0.9rem;
    color: #777;
    margin-bottom: 0.5rem;
  }
  
  .requirements-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .requirement-tag {
    background: #F5F7FF;
    color: #555;
    padding: 0.4rem 0.8rem;
    border-radius: 20px;
    font-size: 0.85rem;
  }
  
  .requirement-tag.accent {
    background: rgba(100, 97, 252, 0.1);
    color: #6461FC;
  }
  
  .process-actions {
    display: flex;
    gap: 0.8rem;
  }
  
  .btn {
    padding: 0.6rem 1.2rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
  }
  
  .btn-primary {
    background: #6461FC;
    color: white;
  }
  
  .btn-primary:hover {
    background: #5451dc;
  }
  
  .btn-outline {
    background: transparent;
    color: #6461FC;
    border: 1px solid #6461FC;
  }
  
  .btn-outline:hover {
    background: rgba(100, 97, 252, 0.05);
  }
  
  .process-connector {
    position: absolute;
    top: 50px;
    left: 25px;
    bottom: -30px;
    width: 50px;
    z-index: 1;
  }
  
  .connector-line {
    position: absolute;
    top: 0;
    left: 0;
    width: 2px;
    height: 100%;
    background: #E8EEFF;
  }
  
  @media (max-width: 768px) {
    .process-flow-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
    
    .process-number {
      width: 40px;
      height: 40px;
      font-size: 1.2rem;
    }
    
    .process-connector {
      left: 20px;
    }
    
    .process-card {
      padding: 1.2rem;
    }
    
    .process-actions {
      flex-direction: column;
    }
  }
</style>
